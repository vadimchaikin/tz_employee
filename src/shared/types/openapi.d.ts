/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/employees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of employees with optional filtering */
        get: {
            parameters: {
                query?: {
                    id?: number;
                    name?: string;
                    email?: string;
                    age?: number;
                    position?: string;
                    department?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Employee"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new employee */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EmployeeInput"];
                };
            };
            responses: {
                /** @description Employee created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get employee by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Employee"];
                    };
                };
            };
        };
        /** Update employee by ID */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EmployeeInput"];
                };
            };
            responses: {
                /** @description Employee updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete employee by ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Employee deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Employee not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Employee: {
            /**
             * Format: int64
             * @description Unique identifier for the employee
             */
            id?: number;
            /** @description Employee's name */
            name?: string;
            /**
             * Format: email
             * @description Employee's email address
             */
            email?: string;
            /** @description Employee's age */
            age?: number;
            position?: components["schemas"]["Position"];
            department?: components["schemas"]["Department"];
        };
        EmployeeInput: {
            /** @description Employee's name */
            name?: string;
            /**
             * Format: email
             * @description Employee's email address
             */
            email?: string;
            /** @description Employee's age */
            age?: number;
            position?: components["schemas"]["Position"];
            department?: components["schemas"]["Department"];
        };
        /** @enum {string} */
        Position: "Developer" | "Designer" | "Project Manager" | "QA Engineer" | "System Administrator";
        /** @enum {string} */
        Department: "Development" | "Design" | "Project Management" | "QA" | "IT Operations";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
